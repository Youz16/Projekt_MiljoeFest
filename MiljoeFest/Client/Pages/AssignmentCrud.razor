@page "/assignmentCrud"
@using MiljoeFest.Shared;
@inject HttpClient Http
@inject StateContainer StateContainer;

<PageTitle>Miljøfest | Opgave-Redigering</PageTitle>

<div class="jumbotron">
    <h1 class="display-4">Koordinatorer kan redigerer opgaver her</h1>


    <hr class="my-4">
</div>

<!--Creation of a div with the class "row"-->
<div class="row">
    <!--within the row, divs with the class "col-sm-4" are made, columns with given dimensions and margins-->
    <div class="col-sm-4">
        <!--Within each column, a card is appended with a body, title, some text and the EditForm-->
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Opgaveoprettelse</h5>
                <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>

                <!--Creation of an EditForm that follows the model of Assignment.cs and creates an assignment in DB upon submit-->
                <EditForm Model="@a" OnValidSubmit="createAssignment">
                    <label>Koordinator ID:</label>
                    <div>
                        <InputNumber @bind-Value="@StateContainer.UserId" placeholder="Koordinator ID" readonly />
                    </div>

                    <label>Opgavenavn:</label>
                    <div>
                        <InputText @bind-Value="@a.AssignmentName" placeholder="Opgavenavn" />
                    </div>

                    <label>Afdeling:</label>
                    <div>
                        <InputText @bind-Value="@a.Department" placeholder="Afdelingsnavn" />
                    </div>

                    <label>Startdato:</label>
                    <div>
                        <InputDate @bind-Value="@a.Start" />
                    </div>

                    <label>Slutdato:</label>
                    <div>
                        <InputDate @bind-Value="@a.End" />
                    </div>

                    <!--Button triggers createAssignment function mentioned in code-block-->
                    <button type="submit" class="btn btn-success mt-3">
                        @OpretText
                    </button>
                </EditForm>
            </div>
        </div>
    </div>

    <div class="col-sm-4">
        <div class="card">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Opgaveopdatering</h5>
                    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>

                    <!--Creation of an EditForm that follows the model of Assignment.cs and updates the info of the chosen assignment upon submit-->
                    <EditForm Model="@current" OnValidSubmit="UpdateAssignment">
                        <label>Koordinator ID:</label>
                        <div>
                            <InputNumber @bind-Value="@current.UserId" placeholder="Koordinator ID" />
                        </div>

                        <label>Opgavenavn:</label>
                        <div>
                            <InputText @bind-Value="@current.AssignmentName" placeholder="Opgavenavn" />
                        </div>

                        <label>Opgave start og slut:</label>
                        <div>
                            <InputDate @bind-Value="@current.Start" />
                        </div>
                        <div>
                            <InputDate @bind-Value="@current.End" />
                        </div>
                        <label>Opgavestatus:</label>
                        <div>
                            <select @bind="@current.Status">
                                <option value="">Vælg status</option>
                                <option value="Planlægning">I planlægning</option>
                                <option value="Udførelse">Under udførelse</option>
                                <option value="Udført">Udført</option>
                            </select>
                        </div>

                        <!--Button triggers UpdateAssignment function mentioned in code-block-->
                        <button type="submit" class="btn btn-success mt-3">
                            @OpdaterText
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

    <div class="col-sm-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Opgavesletning</h5>
                <p class="card-text">With supporting text below as a natural lead-in to additional content.</p>

                <!--Creation of an EditForm that follows the model of Assignment.cs and deletes the assignment with given info upon submit-->
                <EditForm Model="@deleteAssignment" OnValidSubmit="DeleteAssignment">
                    <label>Slet opgave med ID:</label>
                    <div>
                        <InputNumber @bind-Value="@deleteAssignment.AssignmentId" placeholder="Opgave ID" />
                    </div>

                    <!--Button triggers DeleteAssignment function mentioned in code-block-->
                    <button type="submit" class="btn btn-danger mt-3">
                        @deleteText
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!--A table is created, with given headings for the extracted data-->
<table class="table mt-5">
    <thead>
        <tr>
            <th>Opgave ID</th>
            <th>Koordinator ID</th>
            <th>Navn</th>
            <th>Afdeling</th>
            <th>Start</th>
            <th>End</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        <!--The list of assignments (created in the code-block) is looped through, plotting data into a table-->
        @foreach (var a in assignments)
        {
            <tr>
                <td>@a.AssignmentId</td>
                <td>@a.UserId</td>
                <td>@a.AssignmentName</td>
                <td>@a.Department</td>
                <td>@a.Start</td>
                <td>@a.End</td>
                <td>@a.Status</td>
                <td>
                    <!--Button triggers AssignCurrent function mentioned in code-block-->
                    <button class="btn btn-danger" @onclick="()=>AssignCurrent(a)">Select</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    public string OpretText = "Opret Opgave";
    public string OpdaterText = "Opdater Opgave";
    public string deleteText = "Slet Opgave";

    // New instance of a List containing Assignment-instances, for loading several assignments into the page
    List<Assignment> assignments = new();

    // A private instance of Assignment named "a", acts like a model for the EditForm
    private Assignment a = new();

    // New private instance of Assignment named "current"
    private Assignment current = new();

    // New private instance of assignment named "deleteAssignment"
    private Assignment deleteAssignment = new();

    // Upon loading the page, a list of assignments is retrieved
    protected override async Task OnInitializedAsync()
    {
        assignments = await Http.GetFromJsonAsync<List<Assignment>>($"assignmentController/getAssignments");
    }

    // Assigns values to the instance of Assignment named "current"
    public void AssignCurrent(Assignment a)
    {
        current.AssignmentId = a.AssignmentId;
        current.UserId = a.UserId;
        current.AssignmentName = a.AssignmentName;
        current.Department = a.Department;
        current.Start = a.Start;
        current.End = a.End;
        current.Status = a.Status;

    }

    public async Task createAssignment()
    {
        // Sends an instance of Assignment to the DB, with the data from the EditForm
        await Http.PostAsJsonAsync<Assignment>("assignmentController/createAssignment", a);

        // Refreshes the list of assignments after saving the new instance, to include it in the shown list
        assignments = await Http.GetFromJsonAsync<List<Assignment>>($"assignmentController/getAssignments");
    }

    public async Task UpdateAssignment()
    {
        // Updates an assignment with a given AssignmentId to the info provided in the instance of the same AssignmentId (current)
        await Http.PutAsJsonAsync($"assignmentController/updateAssignment?assignmentId={current.AssignmentId}", current);

        // Refreshes the list of assignments after updating the assignment, to include updated data in the shown list
        assignments = await Http.GetFromJsonAsync<List<Assignment>>($"assignmentController/getAssignments");
    }

    public async Task DeleteAssignment()
    {
        // Deletes an assignment with a given AssignmentId that is provided to the instance of Assignment (deleteAssignment)
        await Http.DeleteAsync($"assignmentController/deleteAssignment?assignmentId={deleteAssignment.AssignmentId}");

        // Refreshes the list of assignments after deleting a given assignment, to exclude it in the shown list
        assignments = await Http.GetFromJsonAsync<List<Assignment>>($"assignmentController/getAssignments");
    }
}

